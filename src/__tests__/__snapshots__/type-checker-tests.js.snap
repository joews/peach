exports[`test 
  (def f
    (1 2) => [9 9]
    (a b) => [a b])

  (f 1)
  (f 1 2)
  ((f 1) 2)
  (f 3)
  (f 3 4)
  ((f 3) 4)
 1`] = `
Array [
  "Number -> Number -> Vector<Number>",
  "Number -> Vector<Number>",
  "Vector<Number>",
  "Vector<Number>",
  "Number -> Vector<Number>",
  "Vector<Number>",
  "Vector<Number>",
]
`;

exports[`test 
  (def fib
    0 => 1
    1 => 1
    x => ((add (fib ((sub x) 1))) (fib ((sub x) 2))))
 1`] = `
Array [
  "Number -> Number",
]
`;

exports[`test 
  (def fibc
    0 => 1
    1 => 1
    x => ((add (fibc true)) (fibc ((sub x) 3))))
 1`] = `"Type error: type mismatch"`;

exports[`test 
  (def g f => 5)
  (g g)
 1`] = `
Array [
  "M -> Number",
  "Number",
]
`;

exports[`test 
  (def id x => x)
  ((pair (id 3)) (id true))
 1`] = `
Array [
  "K -> K",
  "L",
]
`;

exports[`test 
  (def list (a, b, c) => [a b c])
  (list 1 true)
 1`] = `"Type error: type mismatch"`;

exports[`test 
  (def list (a, b, c) => [a b c])
  (list 1)
  (list 1 2)
  (list 1 2 3)
  ((list 1) 2 3)
  (list true false true)
 1`] = `
Array [
  "R -> R -> R -> Vector<R>",
  "Number -> Number -> Vector<Number>",
  "Number -> Vector<Number>",
  "Vector<Number>",
  "Vector<Number>",
  "Vector<Boolean>",
]
`;

exports[`test ((() => \`look ma no args\`)) 1`] = `
Array [
  "String",
]
`;

exports[`test ((addZero 1) 2) 1`] = `
Array [
  "G",
]
`;

exports[`test ((pair 1) 2) 1`] = `
Array [
  "I",
]
`;

exports[`test (? 1 1 false 2) 1`] = `"Type error: type mismatch"`;

exports[`test (? true 1 false \`two\`) 1`] = `"Type error: type mismatch"`;

exports[`test (? true 1 false 2) 1`] = `
Array [
  "Number",
]
`;

exports[`test ([1|[2|t]] => t) 1`] = `
Array [
  "Vector<Number> -> Vector<Number>",
]
`;

exports[`test ([1|[true|t]] => t) 1`] = `"Type error: type mismatch"`;

exports[`test ([h|[true|t]] => [[h 1] t]) 1`] = `"Type error: type mismatch"`;

exports[`test ([x|[y|t]] => [[x y] t]) 1`] = `
Array [
  "Vector<Q> -> Vector<Vector<Q>>",
]
`;

exports[`test (a => 1) 1`] = `
Array [
  "E -> Number",
]
`;

exports[`test (addZero 1) 1`] = `
Array [
  "F",
]
`;

exports[`test (def id x => x) (id 3) (id \`hello\`) 1`] = `
Array [
  "J -> J",
  "Number",
  "String",
]
`;

exports[`test (def x \`arf\`) x 1`] = `
Array [
  "String",
  "String",
]
`;

exports[`test (def x 1) (def y true) x y 1`] = `
Array [
  "Number",
  "Boolean",
  "Number",
  "Boolean",
]
`;

exports[`test (inc 1) 1`] = `
Array [
  "Number",
]
`;

exports[`test (pair 1) 1`] = `
Array [
  "H",
]
`;

exports[`test (zero 0) 1`] = `
Array [
  "Boolean",
]
`;

exports[`test [1 2 3] 1`] = `
Array [
  "Vector<Number>",
]
`;

exports[`test [1 2 false] 1`] = `"Type error: type mismatch"`;

exports[`test [1|list] => list 1`] = `
Array [
  "Vector<Number> -> Vector<Number>",
]
`;

exports[`test \`the\` 1`] = `
Array [
  "String",
]
`;

exports[`test 0 => 0, 1 => true 1`] = `"Type error: type mismatch"`;

exports[`test 0 => 0, true => 1 1`] = `"Type error: type mismatch"`;

exports[`test 1 1`] = `
Array [
  "Number",
]
`;

exports[`test f => (f f) 1`] = `"Type error: recursive unification"`;

exports[`test f => g => arg => (g (f arg)) 1`] = `
Array [
  "(N -> O) -> (O -> P) -> N -> P",
]
`;

exports[`test fibonacci.peach 1`] = `
Array [
  "Number -> Number",
  "Vector<Number>",
]
`;

exports[`test function.peach 1`] = `
Array [
  "A -> A",
]
`;

exports[`test str.peach 1`] = `
Array [
  "Vector<String>",
]
`;

exports[`test tail-recursion.peach 1`] = `
Array [
  "Number -> Number -> Number",
  "Number -> Number",
  "Number",
]
`;

exports[`test true 1`] = `
Array [
  "Boolean",
]
`;

exports[`test vector-destructure.peach 1`] = `
Array [
  "Vector<B> -> B",
  "Vector<C> -> C",
  "Vector<D> -> D",
  "Vector<Number>",
  "Vector<Number>",
]
`;

exports[`test x => ((pair (x 3)) (x true)) 1`] = `"Type error: type mismatch"`;

exports[`test zero 1`] = `
Array [
  "Number -> Boolean",
]
`;
