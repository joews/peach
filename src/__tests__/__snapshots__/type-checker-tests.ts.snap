// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`
  f =
    (1 2) => [9 9]
    (a b) => [a b]

  (f 1)
  (f 1 2)
  ((f 1) 2)
  (f 3)
  (f 3 4)
  ((f 3) 4)
 1`] = `
Array [
  "Number -> Number -> Array<Number>",
  "Number -> Array<Number>",
  "Array<Number>",
  "Array<Number>",
  "Number -> Array<Number>",
  "Array<Number>",
  "Array<Number>",
]
`;

exports[`
  fibc =
    0 => 1
    1 => 1
    x => ((add (fibc true)) (fibc ((sub x) 3)))
 1`] = `"Type error: type mismatch"`;

exports[`
  g = f => 5
  (g g)
 1`] = `
Array [
  "M -> Number",
  "Number",
]
`;

exports[`
  id = x => x
  ((pair (id 3)) (id true))
 1`] = `
Array [
  "K -> K",
  "L",
]
`;

exports[`
  id = x => x
  (id 3)
  (id \`hello\`)
 1`] = `
Array [
  "J -> J",
  "Number",
  "String",
]
`;

exports[`
  list = (a, b, c) => [a b c]
  (list 1 true)
 1`] = `"Type error: type mismatch"`;

exports[`
  list = (a, b, c) => [a b c]
  (list 1)
  (list 1 2)
  (list 1 2 3)
  ((list 1) 2 3)
  (list true false true)
 1`] = `
Array [
  "R -> R -> R -> Array<R>",
  "Number -> Number -> Array<Number>",
  "Number -> Array<Number>",
  "Array<Number>",
  "Array<Number>",
  "Array<Boolean>",
]
`;

exports[`
  x = \`arf\`
  x
 1`] = `
Array [
  "String",
  "String",
]
`;

exports[`
  x = 1
  y = true
  x
  y
 1`] = `
Array [
  "Number",
  "Boolean",
  "Number",
  "Boolean",
]
`;

exports[`
 fib =
    0 => 1
    1 => 1
    x => ((add (fib ((sub x) 1))) (fib ((sub x) 2)))
 1`] = `
Array [
  "Number -> Number",
]
`;

exports[`
1 => 2
x => {
  y = 3
  f = a => 2
  (f y)
} 1`] = `
Array [
  "Number -> Number",
]
`;

exports[`
x => {
  x = 3
  x
} 1`] = `"x has already been defined"`;

exports[`((() => \`look ma no args\`)) 1`] = `
Array [
  "String",
]
`;

exports[`((addZero 1) 2) 1`] = `
Array [
  "G",
]
`;

exports[`((pair 1) 2) 1`] = `
Array [
  "I",
]
`;

exports[`([1|[2|t]] => t) 1`] = `
Array [
  "Array<Number> -> Array<Number>",
]
`;

exports[`([1|[true|t]] => t) 1`] = `"Type error: type mismatch"`;

exports[`([h|[true|t]] => [[h 1] t]) 1`] = `"Type error: type mismatch"`;

exports[`([x|[y|t]] => [[x y] t]) 1`] = `
Array [
  "Array<Q> -> Array<Array<Q>>",
]
`;

exports[`(a => 1) 1`] = `
Array [
  "E -> Number",
]
`;

exports[`(addZero 1) 1`] = `
Array [
  "F",
]
`;

exports[`(if (true) 1 else \`two\`) 1`] = `"Type error: type mismatch"`;

exports[`(inc 1) 1`] = `
Array [
  "Number",
]
`;

exports[`(pair 1) 1`] = `
Array [
  "H",
]
`;

exports[`(zero 0) 1`] = `
Array [
  "Boolean",
]
`;

exports[`[1 2 3] 1`] = `
Array [
  "Array<Number>",
]
`;

exports[`[1 2 false] 1`] = `"Type error: type mismatch"`;

exports[`[1|list] => list 1`] = `
Array [
  "Array<Number> -> Array<Number>",
]
`;

exports[`\`the\` 1`] = `
Array [
  "String",
]
`;

exports[`0 => 0, 1 => true 1`] = `"Type error: type mismatch"`;

exports[`0 => 0, true => 1 1`] = `"Type error: type mismatch"`;

exports[`1 1`] = `
Array [
  "Number",
]
`;

exports[`array-destructure.peach 1`] = `
Array [
  "Array<B> -> B",
  "Array<C> -> C",
  "Array<D> -> D",
  "Array<Number>",
  "Array<Number>",
]
`;

exports[`f => (f f) 1`] = `"Type error: recursive unification"`;

exports[`f => g => arg => (g (f arg)) 1`] = `
Array [
  "(N -> O) -> (O -> P) -> N -> P",
]
`;

exports[`fibonacci.peach 1`] = `
Array [
  "Number -> Number",
  "Array<Number>",
]
`;

exports[`function.peach 1`] = `
Array [
  "A -> A",
]
`;

exports[`if (1) 1 else 2 1`] = `"Type error: type mismatch"`;

exports[`if (true) 1 else 2 1`] = `
Array [
  "Number",
]
`;

exports[`str.peach 1`] = `
Array [
  "Array<String>",
]
`;

exports[`tail-recursion.peach 1`] = `
Array [
  "Number -> Number -> Number",
  "Number -> Number",
  "Number",
]
`;

exports[`true 1`] = `
Array [
  "Boolean",
]
`;

exports[`x => ((pair (x 3)) (x true)) 1`] = `"Type error: type mismatch"`;

exports[`zero 1`] = `
Array [
  "Number -> Boolean",
]
`;
