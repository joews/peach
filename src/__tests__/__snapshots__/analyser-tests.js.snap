exports[`test 
  (def fib
    0 => 1
    1 => 1
    x => ((add (fib ((sub x) 1))) (fib ((sub x) 2))))
 1`] = `
Array [
  "Number -> Number",
]
`;

exports[`test 
  (def fibc
    0 => 1
    1 => 1
    x => ((add (fibc true)) (fibc ((sub x) 3))))
 1`] = `"Type error: type mismatch"`;

exports[`test 
  (def g f => 5)
  (g g)
 1`] = `
Array [
  "E -> Number",
  "Number",
]
`;

exports[`test 
  (def id x => x)
  ((pair (id 3)) (id true))
 1`] = `
Array [
  "D -> D",
  "[Number*Boolean]",
]
`;

exports[`test '(1 2 3) 1`] = `
Array [
  "List<Number>",
]
`;

exports[`test '(1 2 false) 1`] = `"Type error: type mismatch"`;

exports[`test ((addZero 1) 2) 1`] = `
Array [
  "Boolean",
]
`;

exports[`test ((pair 1) 2) 1`] = `
Array [
  "[Number*Number]",
]
`;

exports[`test (? 1 1 false 2) 1`] = `"Type error: type mismatch"`;

exports[`test (? true 1 false \`two\`) 1`] = `"Type error: type mismatch"`;

exports[`test (? true 1 false 2) 1`] = `
Array [
  "Number",
]
`;

exports[`test (a => 1) 1`] = `
Array [
  "A -> Number",
]
`;

exports[`test (addZero 1) 1`] = `
Array [
  "Number -> Boolean",
]
`;

exports[`test (def id x => x) (id 3) (id \`hello\`) 1`] = `
Array [
  "C -> C",
  "Number",
  "String",
]
`;

exports[`test (def x \`arf\`) x 1`] = `
Array [
  "String",
  "String",
]
`;

exports[`test (def x 1) (def y true) x y 1`] = `
Array [
  "Number",
  "Boolean",
  "Number",
  "Boolean",
]
`;

exports[`test (inc 1) 1`] = `
Array [
  "Number",
]
`;

exports[`test (pair 1) 1`] = `
Array [
  "B -> [Number*B]",
]
`;

exports[`test (zero 0) 1`] = `
Array [
  "Boolean",
]
`;

exports[`test \`the\` 1`] = `
Array [
  "String",
]
`;

exports[`test 0 => 0, 1 => true 1`] = `"Type error: type mismatch"`;

exports[`test 0 => 0, true => 1 1`] = `"Type error: type mismatch"`;

exports[`test 1 1`] = `
Array [
  "Number",
]
`;

exports[`test f => (f f) 1`] = `"Type error: recursive unification"`;

exports[`test f => g => arg => (g (f arg)) 1`] = `
Array [
  "(F -> G) -> (G -> H) -> F -> H",
]
`;

exports[`test inc 1`] = `
Array [
  "Number -> Number",
]
`;

exports[`test str.peach 1`] = `
Array [
  Array [
    ListType {
      "name": "List",
      "typeArgs": Array [
        TypeOperator {
          "name": "String",
          "typeArgs": Array [],
        },
      ],
    },
    Object {},
  ],
]
`;

exports[`test true 1`] = `
Array [
  "Boolean",
]
`;

exports[`test x => ((pair (x 3)) (x true)) 1`] = `"Type error: type mismatch"`;

exports[`test zero 1`] = `
Array [
  "Number -> Boolean",
]
`;
